generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Role {
  SUPER_ADMIN
  SELLER
  ADMIN
  CUSTOMER
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  REFUNDED
}

enum ReportType {
  SALES
  USERS
  PERFORMANCE
}

// MODELS
model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               Role
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  addresses       Address?
  sellerProfile   Seller?
  adminProfile    Admin?
  customerProfile Customer?
  orders          Order[]

  @@map("users")
}

model Seller {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String?
  user          User     @relation(fields: [email], references: [email])
  storeName     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  wishlistId String?
  wishlist   Wishlist? @relation(fields: [wishlistId], references: [id])
  reviews    Review[]
  blogs      Blog[]
  reports    Report[]

  @@map("sellers")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  user          User     @relation(fields: [email], references: [email])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("admins")
}

model Customer {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  user          User     @relation(fields: [email], references: [email])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  wishlistId String?
  wishlist   Wishlist? @relation(fields: [wishlistId], references: [id])
  blogs      Blog[]

  @@map("customers")
}

model Address {
  id        String      @id @default(uuid())
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id])
  type      AddressType @default(SHIPPING)
  address   String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("addresses")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  images      String[]
  flashSale   FlashSale?
  offer       Offer?
  reviews     Review[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id            String        @id @default(uuid()) @map("orders_id")
  productIds    String[]
  totalAmount   Float
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  payment       Payment?

  @@map("custom_orders")
}

model Review {
  id        String  @id @default(uuid())
  userId    String
  rating    Float?
  comment   String?
  sellerId  String
  productId String

  Seller  Seller?  @relation(fields: [sellerId], references: [id])
  Product Product? @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model FlashSale {
  id        String   @id @default(uuid())
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id])
  discount  Float
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("flashSales")
}

model Offer {
  id        String   @id @default(uuid())
  productId String   @unique
  discount  Float
  startAt   DateTime
  endAt     DateTime
  isExpired Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id         String     @id @default(uuid())
  productIds Int[]
  Seller     Seller[]
  Customer   Customer[]
  updatedAt  DateTime   @updatedAt

  @@map("wishlists")
}

model Blog {
  id         String   @id @default(uuid())
  title      String
  content    String
  updatedAt  DateTime @updatedAt
  sellerId   String?
  customerId String?

  Seller   Seller?   @relation(fields: [sellerId], references: [id])
  Customer Customer? @relation(fields: [customerId], references: [id])

  @@map("blogs")
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  order     Order         @relation(fields: [orderId], references: [id])
}

model Report {
  id        String     @id @default(uuid())
  type      ReportType
  content   String
  sellerId  String?
  Seller    Seller?    @relation(fields: [sellerId], references: [id])
  createdAt DateTime   @default(now())

  @@map("reports")
}
